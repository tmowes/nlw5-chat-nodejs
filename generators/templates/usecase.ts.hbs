import { inject, injectable } from 'tsyringe'

import { {{pascalCase name}}DTO } from '@modules/{{camelCase module}}/dtos/{{pascalCase name}}DTO'
import { {{pascalCase entity}} } from '@modules/{{camelCase module}}/infra/typeorm/entities/{{pascalCase entity}}'
import { I{{pascalCase repository}}Repository } from '@modules/{{camelCase module}}/repositories/I{{pascalCase
repository}}Repository'
import AppError from '@shared/errors/AppError'

@injectable()
export class {{pascalCase name}}UseCase {
constructor(
@inject('{{pascalCase repository}}Repository')
private {{camelCase repository}}Repository: I{{pascalCase repository}}Repository) { }

async execute(data: {{pascalCase name}}DTO): Promise<{{pascalCase entity}}> {
  const {{camelCase entity}}Exists = await this.{{camelCase repository}}Repository.findByName(data.name)

  if ({{camelCase entity}}Exists) {
  throw new AppError('{{pascalCase entity}} already exists!', 400)
  }
  const new{{pascalCase entity}} = this.{{camelCase repository}}Repository.create({...data})
  return new{{pascalCase entity}}
  }
  }
